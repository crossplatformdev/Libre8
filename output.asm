;;;;;;;;;;;;;;;
;; DATA BEGIN;;;
;;;;;;;;;;;;;;;
.data
;; glyphs:
;; _0 00010000h 00
;; ... <must be generated by compiler>
;; _255 000100ffh ff
;; variables:
;; var_name offset value
a 00090000h 40
b 0008ffffh 2
;; strings:
str_0 0008fffeh _72 ;; value for 'H'. Must be generated by compiler.
str_1 0008fffdh _105 ;; value for 'i'. Must be generated by compiler.
;; more variables
newline 0008fffch _10 ;; value for newline character. Must be generated by compiler.
result1 0008fffbh 00 ;; initial value for result variable
result2 0008fffah 00 ;; initial value for result variable
result3 0008ffefh 00 ;; initial value for result variable

;; funtions:
hello_world 00070000h ;; offset for hello_world function
;; function with one argument. can be many arguments. After every function declaration, offset must be incremented by 2000h
arg1 00072000h 00 ;; argument declaration for one_argument function
one_argument_function 00072001h arg1 ;; one argument function. Can be called wirh more than one argument

;;;;;;;;;;;;;;;
;; DATA END ;;
;;;;;;;;;;;;;;;

.code
B __MAIN__
;;;;;;;;;;;;;;;
;; BEGIN hello_world ;;
.hello_world
LDA str_0
OUT
LDA str_1
OUT
LDA newline
OUT
;;;;;;;;;;;;;;; END hello_world
BX 0
;;;;;;;;;;;;;;;
;; BEGIN one_argument_function
.one_argument_function arg1
POPX arg1 ;; Pop the argument from the stack
STA arg1 ;; Store the argument in arg1
LDA arg1 ;; Load the argument
OUT ;; Print the argument
BX arg1 ;; Return from the function
;;;;;;;;;;;;;;; END one_argument_function

;; 
;;;;;;;;;;;;;;;
;; BEGIN MAIN
;;;;;;;;;;;;;;;
.__MAIN__
B hello_world
;;;;;;;;;;;;;;;
;; int result = a + b;
;;;;;;;;;;;;;;;
LDA a
ADD b
STA result
;;;;;;;;;;;;;;;
;; Print result
LDA result
OUT
;;;;;;;;;;;;;;;

BX _0

