;;;;;;;;;;;;;;;
;; DATA BEGIN;;;
;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;
;; GLYPHS: _00 00600000h 00 - _ff 006000ffh ff ;;
;;;;;;;;;;;;;; <must be generated by compiler>
;... GEN HERE ...
;;;;;;;;;;;;;;;
;; GLYPHS END ;
;;;;;;;;;;;;;;;

a 08fffbh 40 ;; variable initialized
b 08fffah 2 ;; variable initialized
str_0 08fffeh 72 ;; value for 'H'. Must be generated by compiler.
str_1 08fffdh 105 ;; value for 'i'. Must be generated by compiler.
newline 08fff9h 10 ;; variable initialized
result1 08fff8h 0 ;; variable initialized to 0
result2 08fff7h 0 ;; variable initialized to 0
result3 08fff6h 0 ;; variable initialized to 0

;;;;;;;;;;;;;;;
;; FUNCTIONS ;;
;;;;;;;;;;;;;;;
hello_world 070000h ;; function offset
one_argument_function 072000h arg1;; function offset
main 074000h ;; function offset

;;;;;;;;;;;;;;;
;; DATA END ;;;
;;;;;;;;;;;;;;;

.code
B main ;; Branch to main function

;;;;;;;;;;;;;;;
;; BEGIN hello_world ;;
.hello_world
LDA str_0
OUT
LDA str_1
OUT
LDA newline
OUT
BX _00 ;; Return from hello_world function
;;;;;;;;;;;;;;; END hello_world

;;;;;;;;;;;;;;;
;; BEGIN one_argument_function ;;
.one_argument_function arg1
;; Argument: arg1
POPX arg1 ;; Pop the argument from the stack
STA arg1 ;; Store the argument in arg1
LDA arg1 ;; Load the argument
OUT ;; Print the argument
BX arg1 ;; Return from the function
;;;;;;;;;;;;;;; END one_argument_function

;;;;;;;;;;;;;;;;
;; BEGIN main ;;
;;;;;;;;;;;;;;;;
.__MAIN__
B hello_world ;; Call function hello_world
;;;;;;;;;;;;;;;
;; int result1 = a + b ;;
LDA a ;; Load variable a
ADD b ;; Add variable b
STA result1 ;; Store result in result1
;;;;;;;;;;;;;;;
LDA a ;; Load variable a
IADD 2 ;; Increment a by 2
STA result2 ;; Store result in result2
;;;;;;;;;;;;;;;
LDIA 40 ;; Load variable a
IADD 2 ;; Increment a by 2
STA result3 ;; Store result in result3
;;;;;;;;;;;;;;;
LDIA 42 ;; Load the immediate value 42
PSAX ;; Push the argument onto the stack
B one_argument_function ;; Call the function
BX 0 ;; Return from main
;;;;;;;;;;;;;;;
;; END MAIN ;;
;;;;;;;;;;;;;;;